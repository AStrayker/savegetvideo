–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ .github /workflows/pr-checks.yaml
–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:
name: '‚úîÔ∏è PR Checks'
on:
  pull_request:
    branches:
      - 'main'

jobs:
  code-quality:
    name: 'üíé Code-Quality'
    strategy:
      matrix:
        os:
          - ubuntu-latest
        python-version:
          - "3.11"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dev dependencies
        run: pip install -e ".[dev]"

      - name: Lint checks with ruff
        run: ruff check app

      - name: Typing checks with mypy
        run: mypy app --pretty

      - name: Formatting checks with black
        run: black --check app
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ savegetvideo/app/tiktok
/__init__.py
–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ savegetvideo/app/tiktok
/api.py
–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: 
import asyncio
from collections.abc import AsyncIterable

from tiktok.client import AsyncTikTokClient
from tiktok.data import Tiktok


class TikTokAPI:
    @classmethod
    async def download_tiktoks(cls, urls: list[str]) -> AsyncIterable[Tiktok]:
        tasks = [cls.download_tiktok(url) for url in urls]
        for task in asyncio.as_completed(tasks):
            tiktok = await task
            yield tiktok

    @classmethod
    async def download_tiktok(cls, url: str) -> Tiktok:
        async with AsyncTikTokClient() as client:
            if (item := await client.get_page_data(url=url)) and item.video_url:
                video = await client.get_video(url=item.video_url)
                return Tiktok(url=url, description=item.description, video=video)
            return Tiktok()
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ savegetvideo/app/tiktok
/client.py
–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:
import json
import random
import string
from datetime import UTC, datetime

import httpx
from bs4 import BeautifulSoup

from tiktok.data import ItemStruct
from utils import DifferentPageError, NoDataError, NoScriptError, retries


class AsyncTikTokClient(httpx.AsyncClient):
    def __init__(self) -> None:
        super().__init__(
            headers={
                "Referer": "https://www.tiktok.com/",
                "User-Agent": (
                    f"{''.join(random.choices(string.ascii_lowercase, k=random.randint(4, 10)))}-"
                    f"{''.join(random.choices(string.ascii_lowercase, k=random.randint(3, 7)))}/"
                    f"{random.randint(10, 300)} "
                    f"({datetime.now(tz=UTC).replace(microsecond=0).timestamp()})"
                ),
            },
            timeout=30,
            cookies={
                "tt_webid_v2": f"{random.randint(10 ** 18, (10 ** 19) - 1)}",
            },
            follow_redirects=True,
        )

    @retries(times=3)
    async def get_page_data(self, url: str) -> ItemStruct:
        page = await self.get(url)
        page_id = page.url.path.rsplit("/", 1)[-1]

        soup = BeautifulSoup(page.text, "html.parser")

        if script := soup.select_one('script[id="__UNIVERSAL_DATA_FOR_REHYDRATION__"]'):
            script = json.loads(script.text)
        else:
            raise NoScriptError

        try:
            data = script["__DEFAULT_SCOPE__"]["webapp.video-detail"]["itemInfo"]["itemStruct"]
        except KeyError as ex:
            raise NoDataError from ex

        if data["id"] != page_id:
            raise DifferentPageError
        return ItemStruct.parse(data)

    async def get_video(self, url: str) -> bytes | None:
        resp = await self.get(url)
        if resp.is_error:
            return None
        return resp.content
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ savegetvideo/app/tiktok
/data.py
–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:
from dataclasses import dataclass


@dataclass
class Tiktok:
    url: str = ""
    description: str = ""
    video: bytes | None = None

    @property
    def caption(self) -> str:
        return f"{self.description}\n\n{self.url}"


@dataclass
class ItemStruct:
    page_id: str
    video_url: str
    description: str

    @classmethod
    def parse(cls, data: dict) -> "ItemStruct":
        return ItemStruct(
            page_id=data["id"],
            video_url=(
                (data["video"].get("playAddr", "") or data["video"].get("downloadAddr"))
                .encode()
                .decode("unicode_escape")
            ),
            description=data["desc"],
        )
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ savegetvideo/app
/bot.py
–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:
from aiogram import Bot, Dispatcher, F
from aiogram.types import BufferedInputFile, Message

from settings import settings
from tiktok.api import TikTokAPI

dp = Dispatcher()

filters = [
    F.text.contains("tiktok.com"),
    (not settings.allowed_ids)
    | F.chat.id.in_(settings.allowed_ids)
    | F.from_user.id.in_(settings.allowed_ids),
]


@dp.message(*filters)
@dp.channel_post(*filters)
async def handle_tiktok_request(message: Message, bot: Bot) -> None:
    entries = [
        message.text[e.offset : e.offset + e.length]
        for e in message.entities or []
        if message.text is not None
    ]

    urls = [
        u if u.startswith("http") else f"https://{u}"
        for u in filter(lambda e: "tiktok.com" in e, entries)
    ]

    async for tiktok in TikTokAPI.download_tiktoks(urls):
        if not tiktok.video:
            continue

        video = BufferedInputFile(tiktok.video, filename="video.mp4")
        caption = tiktok.caption if settings.with_captions else None

        if settings.reply_to_message:
            await message.reply_video(video=video, caption=caption)
        else:
            await bot.send_video(chat_id=message.chat.id, video=video, caption=caption)
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ savegetvideo/app
/main.py
–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from bot import dp  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º dp –∏–∑ —Ñ–∞–π–ª–∞ bot.py
from settings import settings  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º settings –∏–∑ —Ñ–∞–π–ª–∞ settings.py

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
@dp.message(F.text == "/start")
async def welcome(message: Message, bot: Bot) -> None:
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è TikTok –≤–∏–¥–µ–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ TikTok.")

async def start() -> None:
    bot = Bot(token=settings.api_token)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(start())
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ savegetvideo/app
/settings.py
–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:
import json
import os
from dataclasses import dataclass
from dotenv import load_dotenv  # –ò–º–ø–æ—Ä—Ç load_dotenv

load_dotenv()  # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

@dataclass
class Settings:
    api_token: str
    allowed_ids: list[int]
    reply_to_message: bool
    with_captions: bool


def parse_env_list(key: str) -> list[int]:
    return list(map(int, json.loads(os.getenv(key, "[]"))))


def parse_env_bool(key: str, default: str = "false") -> bool:
    return os.getenv(key, default).lower() in ("yes", "true", "1", "on")


settings = Settings(
    api_token=os.getenv("API_TOKEN", ""),  # –£–¥–∞–ª–µ–Ω –ª–∏—à–Ω–∏–π –æ—Ç—Å—Ç—É–ø
    allowed_ids=parse_env_list("ALLOWED_IDS"),
    reply_to_message=parse_env_bool("REPLY_TO_MESSAGE", default="true"),
    with_captions=parse_env_bool("WITH_CAPTIONS", default="true"),
)
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ savegetvideo/app
/utils.py
–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:
import asyncio
import logging
from collections.abc import Awaitable, Callable
from functools import wraps
from typing import ParamSpec, TypeVar


class RetryingError(Exception):
    pass


class NoScriptError(RetryingError):
    def __init__(self) -> None:
        super().__init__("no script")


class NoDataError(RetryingError):
    def __init__(self) -> None:
        super().__init__("no data")


class DifferentPageError(RetryingError):
    def __init__(self) -> None:
        super().__init__("tiktok_id is different from page_id")


P = ParamSpec("P")
T = TypeVar("T")

Wrapper = Callable[P, Awaitable[T | None]]
Decorator = Callable[[Callable[P, Awaitable[T]]], Wrapper]


def retries(times: int) -> Decorator:
    def decorator(func: Callable[P, Awaitable[T]]) -> Wrapper:
        @wraps(func)
        async def wrapper(*args: P.args, **kwargs: P.kwargs) -> T | None:
            for _ in range(times):
                try:
                    return await func(*args, **kwargs)
                except RetryingError:
                    logging.exception("Retrying")
                    await asyncio.sleep(0.5)
            return None

        return wrapper

    return decorator
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ savegetvideo
/.env
–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:
API_TOKEN=7662725338:AAE-OoxbHne4oXefrMRYPXvEtEnPdvNNvnc
ALLOWED_IDS=[]
REPLY_TO_MESSAGE=true
WITH_CAPTIONS=false
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ savegetvideo
/.gitignore
–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/
.idea/
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ savegetvideo
/Dockerfile
–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:
FROM python:3.11.8-alpine

WORKDIR /code

COPY pyproject.toml requirements.txt ./

RUN pip install -r requirements.txt

COPY app app

CMD [ "python", "app/main.py" ]
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ savegetvideo
/compose.yaml
–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:
services:
  teletok:
    build: .
    env_file:
      - .env
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ savegetvideo
/pyproject.toml
–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:
[project]
name = "teletok"
version = "5.1.0"
description = "Telegram bot that will download a video by a TikTok url"
authors = [{ name = "Igor Popov", email = "lentrog@gmail.com" }]
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.11"

dependencies = [
    "httpx==0.27.0",
    "aiogram==3.4.1",
    "beautifulsoup4==4.12.3",
]

[project.optional-dependencies]
dev = [
    "black~=24.3.0",
    "ruff~=0.3.5",
    "mypy~=1.9.0",
]

[tool.black]
target-version = ['py311']
line-length = 100


[tool.mypy]
mypy_path = ["app"]
follow_imports = "silent"
strict = true
disallow_subclassing_any = false
disallow_any_generics = false
ignore_missing_imports = true


[tool.ruff]
line-length = 100
target-version = "py311"
src = ["app"]
lint.ignore = ["D", "S311", "ANN10", "RUF001", "RUF012", "FIX", "TD002", "TD003"]
lint.select = ["ALL"]
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ savegetvideo
/requirements.txt
–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:
aiogram==3.0.0
python-dotenv==0.20.0



















